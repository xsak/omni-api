# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Apiresponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, forras: str=None, szam: int=None):  # noqa: E501
        """Apiresponse - a model defined in Swagger

        :param forras: The forras of this Apiresponse.  # noqa: E501
        :type forras: str
        :param szam: The szam of this Apiresponse.  # noqa: E501
        :type szam: int
        """
        self.swagger_types = {
            'forras': str,
            'szam': int
        }

        self.attribute_map = {
            'forras': 'forras',
            'szam': 'szam'
        }
        self._forras = forras
        self._szam = szam

    @classmethod
    def from_dict(cls, dikt) -> 'Apiresponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiresponse of this Apiresponse.  # noqa: E501
        :rtype: Apiresponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forras(self) -> str:
        """Gets the forras of this Apiresponse.


        :return: The forras of this Apiresponse.
        :rtype: str
        """
        return self._forras

    @forras.setter
    def forras(self, forras: str):
        """Sets the forras of this Apiresponse.


        :param forras: The forras of this Apiresponse.
        :type forras: str
        """

        self._forras = forras

    @property
    def szam(self) -> int:
        """Gets the szam of this Apiresponse.


        :return: The szam of this Apiresponse.
        :rtype: int
        """
        return self._szam

    @szam.setter
    def szam(self, szam: int):
        """Sets the szam of this Apiresponse.


        :param szam: The szam of this Apiresponse.
        :type szam: int
        """
        if szam is None:
            raise ValueError("Invalid value for `szam`, must not be `None`")  # noqa: E501

        self._szam = szam
